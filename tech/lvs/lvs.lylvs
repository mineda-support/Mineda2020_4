<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>lvs</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name>lvs_scripts</group-name>
 <menu-path>tools_menu.lvs.end</menu-path>
 <interpreter>dsl</interpreter>
 <dsl-interpreter-name>lvs-dsl-xml</dsl-interpreter-name>
 <text># Mineda2020_4 lvs rule v0.1 May. 2, 2020 copy left by S. Moriyama (Anagix Corporation)
deep
report_lvs

# Drawing layers

diff = input(3, 0) 
tin = input(5, 0)
cnt = input(7, 0)
ml1 = input(8, 0)
via1 = input(9, 0) 
ml2 = input(10, 0)
text = input(13, 0)
frame = input(14, 0)
res = input(15, 0)
cap = input(16, 0)
dio = input(17, 0)
parea = input(18, 0)
narea = input(19, 0)

# Special layer for bulk terminals

bulk        = polygon_layer

# Computed layers
tin_not_res  = tin - res
tin_in_res   = tin &amp; res

cnt_in_cap = cnt &amp; cap
tin_overlapping_cap = tin.overlapping(cap) - tin.inside(cap)

ndiff       = diff &amp; narea
pdiff       = diff &amp; parea
pgate       = pdiff &amp; tin_not_res
psd         = pdiff - pgate

ngate      = ndiff &amp; tin_not_res 
nsd        = ndiff - ngate

lv_ngate = ngate
lv_pgate = pgate

# Device extraction  
# Capacitor extraction
area_cap = 1.72e-15
model_name = 'CAP'
extract_devices(capacitor(model_name, area_cap), {'P1'=&gt;tin_overlapping_cap, 'P2'=&gt; cap})                         
# resistance extraction

#model_name = "D"
#pplus = (diff_in_nwl &amp; parea )  - (pgate + psd)
#extract_devices(diode(model_name), { "P" =&gt; pplus, "N" =&gt; nwl , 'tA' =&gt; cnt,  'tC' =&gt; cnt})

#sheet_rho = 20 # TiN???
sheet_rho = 5.25 # Rpdiff
model_name = "RES"
bbox = (res | cnt).extents
cap_layer = bbox - res
extract_devices(resistor(model_name, sheet_rho), {"R" =&gt;  tin_in_res, "C" =&gt; cap_layer,
                                                                'tA' =&gt; tin_not_res, 'tB'=&gt;tin_not_res  })# &amp; pol &amp; via1 &amp; ml1})
# PMOS transistor device extraction
extract_devices(mos3("PMOS"), { "SD" =&gt; psd, "G" =&gt; lv_pgate, 
                                "tS" =&gt; psd, "tD" =&gt; psd, "tG" =&gt;tin_not_res })
# NMOS transistor device extraction
extract_devices(mos3("NMOS"), { "SD" =&gt; nsd, "G" =&gt; lv_ngate,  
                                "tS" =&gt; nsd, "tD" =&gt; nsd, "tG" =&gt;tin_not_res})

# Define connectivity for netlist extraction

# Inter-layer
connect(psd,   cnt)
connect(nsd,   cnt)
connect(tin,   cnt)
connect(tin_not_res, cnt)
connect(tin_overlapping_cap, cnt)
connect(cap, cnt)

connect(cnt, ml1)
connect(ml1,  via1)
connect(via1,     ml2)

# Global connections
# connect_global(bulk, "SUBSTRATE")

sdir = File.dirname source.path
ext_name = File.extname source.path
target = File.basename(source.path).sub(ext_name, '')
reference = File.join(sdir, "#{target}_reference.cir")
output = File.join sdir, "#{target}_output.cir"
lvs_work = File.join(sdir, 'lvs_work')
Dir.mkdir lvs_work unless File.directory? lvs_work

if File.exist? target+'.yaml'
  require 'yaml'
  ref = YAML.load File.read(target+'.yaml')
  if File.mtime(ref['netlist']) &lt; File.mtime(ref['schematic']) 
    raise "netlist file '#{ref['netlist']}' is outdated!\nPlease update netlist and run get_reference again!"
  end
  if File.exist?(reference) &amp;&amp; (File.mtime(reference) &lt; File.mtime(ref['netlist']))
    raise "Please run get_reference because netlist file '#{ref['netlist']}'is modified"
  end
end
#output = "#{target}_output.cir"

# -------------------------------------------------------------------
# Netlist and compare

netlist.purge
# Hierarchy alignment (flatten out unmatched cells)

target_netlist(output, write_spice, "Created by KLayout")

class MOS4To3ConvertingSpiceReader &lt; RBA::NetlistSpiceReaderDelegate

  def element(circuit, el, name, model, value, nets, params)
    if el != "M" || nets.size != 4
      # all other elements are left to the standard implementation
      return super
    end
    # provide a device class
    cls = circuit.netlist.device_class_by_name(model)
    if ! cls
      cls = RBA::DeviceClassMOS3Transistor::new
      cls.name = model
      circuit.netlist.add(cls)
    end
    # create a device
    device = circuit.create_device(cls, name)
    # and configure the device
    [ "S", "G", "D" ].each_with_index do |t,index|
      device.connect_terminal(t, nets[index])
    end
    # parameters in the model are given in micrometer units, so 
    # we need to translate the parameter values from SI to um values:
    device.set_parameter("W", (params["W"] || 0.0) * 1e6)
    device.set_parameter("L", (params["L"] || 0.0) * 1e6)
    # TODO: if required, add AS,AD,PS and PD ...
    return true
  end

end

# Instantiate a reader using the new delegate
reader = RBA::NetlistSpiceReader::new(MOS4To3ConvertingSpiceReader::new)

# Import the schematic with this reader
#schematic("your_schematic.cir", reader)

if File.exist? reference
  schematic reference, reader
  if File.exist? "#{lvs_work}/#{target}_rc_ext_settings.rb"
    load "#{lvs_work}/#{target}_rc_ext_settings.rb"
    rc_ext_settings
  end
# Netlist vs. netlist
  compare
  slink = "#{lvs_work}/#{File.basename output}.txt"
  File.delete slink if File.exist?(slink)
  if /mswin32|mingw/ =~ RUBY_PLATFORM
    system "WSL cd #{lvs_work}; ln -s ../#{File.basename output}.txt"
  else
    File.symlink "../#{File.basename output}", slink if (File.directory?(lvs_work) &amp;&amp; !File.symlink?(slink))
  end
end

</text>
</klayout-macro>
